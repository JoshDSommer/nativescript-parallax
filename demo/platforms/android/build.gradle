/*
*	Script builds apk in release or debug mode
*	To run: 
*			gradle buildapk -Prelease (release mode)
*			gradle buildapk (debug mode -> default)
* 	Options:
*			-Prelease  //this flag will run build in release mode
*			-PksPath=[path_to_keystore_file]
*			-PksPassword=[password_for_keystore_file]
*			-Palias=[alias_to_use_from_keystore_file]
*			-Ppassword=[password_for_alias]
*
*			-PtargetSdk=[target_sdk] (default is 22)
*			-PbuildToolsVersion=[build_tools_version] (default is 22.0.1)
*			-PsupportVersion=[support_version] (default (22.2.0)
*			-PcompileSdk=[compile_sdk_version] (default 22)
*
*			-PrunSBGenerator //this flag will triger static binding generation
*/

buildscript {
    repositories {
        jcenter()
    }

	dependencies {
		classpath "com.android.tools.build:gradle:1.5.0"
	}
}

apply plugin: "com.android.application"

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def metadataParams = new LinkedList <String> ()
def allJarPaths = new LinkedList <String> ()
def configurationsDir = "configurations"
def createPluginConfigFile = false
def configStage = "\n:config phase: "
def nodeModulesDir = "../../node_modules/"
def libDir = "../../lib/Android/"
def pluginNames = new ArrayList<String>()
def configDir = file(configurationsDir)
def appResExists = false
def appResourcesName = "NativescriptAppResources"

def compiteCompileSdkVersion () {
	if(project.hasProperty("compileSdk")) {
		return compileSdk
	}
	else {
		return 23
	}
}

def computeTargetSdkVersion() {
	if(project.hasProperty("targetSdk")) {
		return targetSdk
	}
	else {
		return 23
	}
}

def computeBuildToolsVersion() {
	if(project.hasProperty("buildToolsVersion")) {
		return buildToolsVersion
	}
	else {
		return "22.0.1"
	}
}
project.ext.selectedBuildType = project.hasProperty("release") ? "release" : "debug"

def renameResultApks (variant) {
	def name
	variant.outputs.each { output ->

		def apkDirectory = output.packageApplication.outputFile.parentFile
		def apkNamePrefix = rootProject.name + "-" + variant.buildType.name

		if (output.zipAlign) {
			name = apkNamePrefix + ".apk"
			output.outputFile = new File(apkDirectory, name);
		}

		name = apkNamePrefix + "-unaligned.apk"
		output.packageApplication.outputFile = new File(apkDirectory, name);
	}    
}

////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// CONFIGURATIONS ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

android {
	compileSdkVersion compiteCompileSdkVersion()
    buildToolsVersion computeBuildToolsVersion()
	
	defaultConfig {
		minSdkVersion 17
		targetSdkVersion computeTargetSdkVersion()
	}
	
	sourceSets.main {
        jniLibs.srcDir "libs/jni"
    }
	
	signingConfigs {
        release {
            if(project.hasProperty("release")) {
				if(project.hasProperty("ksPath") &&
					project.hasProperty("ksPassword") &&
					project.hasProperty("alias") &&
					project.hasProperty("password"))
				{
					storeFile file(ksPath)
					storePassword ksPassword
					keyAlias alias
					keyPassword password
				}
			}
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
	
	applicationVariants.all { variant ->
		renameResultApks(variant)
	}
	
	
	applicationVariants.all { variant ->
		def variantName = variant.name.capitalize()
		def compileSourcesTaskName = "compile${variantName}Sources"
		def compileSourcesTask = project.tasks.findByName(compileSourcesTaskName)
		compileSourcesTask.finalizedBy "buildMetadata"
	}
}

repositories {
    jcenter()
    // used for local *.AAR files
    flatDir {
    	dirs 'libs/aar'
	}
}

dependencies {
	def suppotVer = "22.2.0";
	if(project.hasProperty("supportVersion")) {
		suppotVer = supportVersion
	}
	
    compile "com.android.support:support-v4:$suppotVer"
    compile "com.android.support:appcompat-v7:$suppotVer"

    // take all jars within the libs dir
	compile fileTree(dir: "libs", include: ["**/*.jar"])

	// take all jars within the node_modules dir
	compile fileTree(dir: nodeModulesDir, include: ["**/platforms/android/**/*.jar"], exclude: '**/.bin/**')

	// take all jars within the lib/Android dir
	compile fileTree(dir: libDir, include: ["**/*.jar"])
	
	//when gradle has aar support this will be preferred instead of addAarDependencies
	// compile files("$rootDir/libs/aar") {
        // builtBy 'copyAarDependencies'
    // }

}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// CONFIGURATION PHASE //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

task pluginStructureCheck {
	def ft = fileTree(dir: nodeModulesDir, include: ["**/platforms/android/**/*.*"], exclude: '**/.bin/**')
	ft.files.each { f ->
		def fileName = f.getName();
		if(
				!fileName.endsWith(".aar")
				&&
				!fileName.equals("include.gradle")
				&&
				!fileName.endsWith(".jar")
			){
			println "WARNING: The file: " + f + " is depricated, you can read more about what will be the expected plugin structure here: https://www.nativescript.org/blog/migrating-n-android-plugins-from-version-1.7-to-2.0" 
		}
	}
}

def createIncludeFile (filePath, fileName, dimensionName) {
	println "\t+creating include.gradle file for: " + filePath
	def defaultIncludeFile = new File(filePath, "include.gradle")
	defaultIncludeFile.write ""
	defaultIncludeFile << "android { \n"
	defaultIncludeFile << "\tproductFlavors {\n"
	defaultIncludeFile << '\t\t"' + fileName + '" {\n'
	defaultIncludeFile << '\t\t\tdimension "' + dimensionName + '"\n'
	defaultIncludeFile << "\t\t}\n"
	defaultIncludeFile << "\t}\n"
	defaultIncludeFile << "}"
}

def sanatizeDimensionName(str) {
	return str.replaceAll(/\W/, "")
}

//make sure the include.gradle file, produced by the user, has only allowed characters in dimension attribute and remove any invalid characters if necessary
def updateIncludeGradleFile(subFile, dimensionName) {
	def igFile = new File(subFile.getAbsolutePath())
	def newContent = igFile.text.replaceAll(/dimension\s+["'](.+?)["']/)  { fullMatch, fDimension ->
							def newFg = sanatizeDimensionName(fDimension)
							dimensionName = newFg
							return "dimension \"$newFg\""
						}
	igFile.text = newContent
	
	return dimensionName
}

task createDefaultIncludeFiles {
	description "creates default include.gradle files for added plugins IF NECESSARY"
	println "$configStage createDefaultIncludeFiles"
	def ft = file(configurationsDir)
		
	ft.listFiles().each { fl ->
	
		if(fl.isDirectory()) {
			def fileName = fl.name
			def dimensionName = sanatizeDimensionName(fileName)
			createPluginConfigFile = true
			def foundIncludeFile = false
			
			println "\t+found plugins: " + fileName
			fl.listFiles().each { subFile ->
			
				if(subFile.name == "include.gradle") {
					foundIncludeFile = true
					dimensionName = updateIncludeGradleFile(subFile, dimensionName)
				}
			}
			
			pluginNames.add('"' + dimensionName + '"')
			
			if(!foundIncludeFile) {
				createIncludeFile(fl.getAbsolutePath() ,fileName, dimensionName)
			}
		}
	}
}

task createPluginsConfigFile {
	description "creates product flavor config file based on what plugins are added"
	
	if(configDir.exists()) {
		println "$configStage createPluginsConfigFile"
		
		def flavorsFile = new File("$configurationsDir/include.gradle")
		flavorsFile.write "" //clear config file
		
		if(createPluginConfigFile) {
			println "\t+creating product flavors include.gradle file in $configurationsDir folder..."
			def flavors = pluginNames.join(",")
			
			flavorsFile << "android { \n"
			flavorsFile << "\tflavorDimensions " + flavors + "\n"
			flavorsFile << "}\n"
		}
	}
}

task pluginExtend {
	description "applies additional configuration"

	def pathToAppGradle = "../../app/App_Resources/Android/app.gradle" 
	def appGradle = file(pathToAppGradle)
	if(appGradle.exists()) {
		apply from: pathToAppGradle
	}

	if(configDir.exists()) {
	println "$configStage pluginExtend"
		configDir.eachFileRecurse(groovy.io.FileType.FILES) {
			if(it.name.equals('include.gradle')) {
				println "\t+applying configuration from: " + it
				apply from: it
			}
		}
	}
}

//// doesn't work unless task is explicitly called (TODO: research configurations hook)
// addAarDependencies.dependsOn(copyAarDependencies)
// createDefaultIncludeFiles.dependsOn(addAarDependencies)
// createPluginsConfigFile.dependsOn(createDefaultIncludeFiles)
// pluginExtend.dependsOn(createPluginsConfigFile)


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// BEFORE EXECUTION /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// we need to copy all dependencies into a flat dir, as pointed by the repositories configurations at the top
task copyAarDependencies (type: Copy) {
	println "$configStage copyAarDependencies"
	from fileTree(dir: nodeModulesDir, include: ["**/*.aar"], exclude: '**/.bin/**').files
	into "libs/aar"
}

task addAarDependencies <<  {
	println "$configStage addAarDependencies"
	// manually traverse all the locally copied AAR files and add them to the project compilation dependencies list
	FileTree tree = fileTree(dir: "libs/aar", include: ["**/*.aar"])
	tree.each { File file ->
		// remove the extension of the file (.aar)
		def length = file.name.length() - 4
		def fileName = file.name[0..<length]
		println "\t+adding dependency: " + file.getAbsolutePath()
		project.dependencies.add("compile", [name: fileName, ext: "aar"])
	}
}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// EXECUTUION PHASE /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

task cleanLocalAarFiles(type: Delete) {
	delete fileTree(dir: "libs/aar", include: ["*.aar"])
}

task ensureMetadataOutDir {
	def outputDir = file("$rootDir/metadata/output/assets/metadata")
	outputDir.mkdirs()
}

task collectAllJars {
	description "gathers all paths to jar dependencies before building metadata with them"
	
	def explodedAarDir = project.buildDir.getAbsolutePath() + "/intermediates/exploded-aar/"
	def sdkPath = android.sdkDirectory.getAbsolutePath();
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"
	
	doFirst {
		configurations.compile.each { File dependencyFile ->
			// println "\t+" + dependencyFile.getAbsolutePath()
			allJarPaths.add(dependencyFile.getAbsolutePath())
		}
		
		allJarPaths.add(androidJar);
		
		def ft = fileTree(dir: explodedAarDir, include: "**/*.jar")
		ft.each { currentJarFile ->
			allJarPaths.add(currentJarFile.getAbsolutePath())
		}
		
		metadataParams.add("metadata-generator.jar")
		metadataParams.add("../metadata/output/assets/metadata")
		for(def i = 0; i < allJarPaths.size(); i++) {
			metadataParams.add(allJarPaths.get(i));
		}

		def classesDir = "$rootDir/build/intermediates/classes"

		def classesSubDirs = new File(classesDir).listFiles()

		def selectedBuildType = project.ext.selectedBuildType

		for (File subDir: classesSubDirs) {
			if (!subDir.getName().equals(selectedBuildType)) {
				def subDirBuildType = new File(subDir, selectedBuildType)
				if (subDirBuildType.exists()) {
					metadataParams.add(subDirBuildType.getAbsolutePath());
				}
			}
		}

		def classesDirBuildType = new File(classesDir, selectedBuildType)
		if (classesDirBuildType.exists()) {
			metadataParams.add(classesDirBuildType.getAbsolutePath())
		}
	}
}


task buildMetadata (type: JavaExec) {
	description "builds metadata with provided jar dependencies"
	
	inputs.files(allJarPaths)
	inputs.dir("build/intermediates/classes")

	outputs.files("metadata/output/assets/metadata/treeNodeStream.dat", "metadata/output/assets/metadata/treeStringsStream.dat", "metadata/output/assets/metadata/treeValueStream.dat")

	doFirst {
		workingDir "build-tools"

		main "-jar"

		args metadataParams.toArray()
	}
	
	doLast {
		copy {
			from "metadata/output/assets/metadata"
			into "src/main/assets/metadata"
		}
		
		def files = new File("${buildDir}/intermediates/res").listFiles()
		def tmpResourceAPK = null
		for (File f: files) {
			def name = f.getName();
			if (name.endsWith(".ap_")) {
				tmpResourceAPK = f;
				break;
			}
		}
		
		def aaptCommand = "${android.getSdkDirectory().getAbsolutePath()}/build-tools/${android.buildToolsVersion}/aapt"
		if (isWinOs) {
			aaptCommand += ".exe"
		}
		
		def tmpAPKPath = tmpResourceAPK.getPath()
		
		def removeCmdParams = new ArrayList<String>([aaptCommand, "remove", tmpAPKPath, "assets/metadata/treeNodeStream.dat", "assets/metadata/treeStringsStream.dat", "assets/metadata/treeValueStream.dat"])
		
		exec {
			ignoreExitValue true
			workingDir "metadata/output"
			commandLine removeCmdParams.toArray()
		}
		
		def addCmdParams = new ArrayList<String>([aaptCommand, "add", tmpAPKPath, "assets/metadata/treeNodeStream.dat", "assets/metadata/treeStringsStream.dat", "assets/metadata/treeValueStream.dat"])
		
		exec {
			workingDir "metadata/output"
			commandLine addCmdParams.toArray()
		}
	}
}


task deleteExplodedAarFolder (type: Delete) {

	outputs.upToDateWhen {
		!buildMetadata.didWork
	}
	
	def explodedAarDir = project.buildDir.getAbsolutePath() + "/intermediates/exploded-aar"
	delete explodedAarDir
}



////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// OPTIONAL TASKS //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
task runBindingGenerator(dependsOn: "ing:jar") {
	rootProject.jarsDir = allJarPaths
}
runBindingGenerator.dependsOn("bg:jar")

task rbg (dependsOn: "asbg:generatebindings")



////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// EXECUTION ORDER /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// -- configuration phase
// 1. Copy *.aar dependencies
// 2. Add *.aar dependencies
// 3. create default include files
// 4. create plugins config file
// 5. plugin extend (apply from include files)

// --execution phase
ensureMetadataOutDir.dependsOn(cleanLocalAarFiles)
collectAllJars.dependsOn(ensureMetadataOutDir)
buildMetadata.dependsOn(collectAllJars)

//DO NOT UNCOMMENT
// mergeAssets.dependsOn(copyMetadata) -> look in CONFIGURATIONS(top) in android.applicationVariants to see how it's done

task buildapk {
	// problem is compile dependencies need to be changed before configuration stage
	// and this is the only way so far
	tasks.copyAarDependencies.execute()
    tasks.addAarDependencies.execute()

	//done to build only necessary apk
	if(project.hasProperty("release")) {
		dependsOn assembleRelease
	}
	else {
		dependsOn assembleDebug
	}
	
	dependsOn deleteExplodedAarFolder
}

